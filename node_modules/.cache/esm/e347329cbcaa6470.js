let express,homeController,mongoose,dotenv,createEvent,deleteEvent,updateEvent,fetchEvents,fetchEventById,validateEventData,validateOrganizerData,validateOrganizerUpdateData,createOrganizer,deleteOrganizer,fetchOrganizer,fetchOrganizerById,updateOrganizer,validateCategoryData,createCategory,deleteCategory,fetchCategory,fetchCategoryById,updateCategory,validateTicketTypeData,validateTicketTypeUpdateData,createTicketType,deleteticketType,fetchticketType,fetchTicketTypeById,updateticketType;_bca‍.w("express",[["default",["express"],function(v){express=v}]]);_bca‍.w("./controllers/home.controller",[["homeController",["homeController"],function(v){homeController=v}]]);_bca‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_bca‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_bca‍.w("./controllers/event.controller",[["createEvent",["createEvent"],function(v){createEvent=v}],["deleteEvent",["deleteEvent"],function(v){deleteEvent=v}],["updateEvent",["updateEvent"],function(v){updateEvent=v}],["fetchEvents",["fetchEvents"],function(v){fetchEvents=v}],["fetchEventById",["fetchEventById"],function(v){fetchEventById=v}]]);_bca‍.w("./controllers/middleware/event.vaildator",[["validateEventData",["validateEventData"],function(v){validateEventData=v}]]);_bca‍.w("./controllers/middleware/organizer.validator",[["validateOrganizerData",["validateOrganizerData"],function(v){validateOrganizerData=v}],["validateOrganizerUpdateData",["validateOrganizerUpdateData"],function(v){validateOrganizerUpdateData=v}]]);_bca‍.w("./controllers/organizer.controller",[["createOrganizer",["createOrganizer"],function(v){createOrganizer=v}],["deleteOrganizer",["deleteOrganizer"],function(v){deleteOrganizer=v}],["fetchOrganizer",["fetchOrganizer"],function(v){fetchOrganizer=v}],["fetchOrganizerById",["fetchOrganizerById"],function(v){fetchOrganizerById=v}],["updateOrganizer",["updateOrganizer"],function(v){updateOrganizer=v}]]);_bca‍.w("./controllers/middleware/category.validate",[["validateCategoryData",["validateCategoryData"],function(v){validateCategoryData=v}]]);_bca‍.w("./controllers/category.controller",[["createCategory",["createCategory"],function(v){createCategory=v}],["deleteCategory",["deleteCategory"],function(v){deleteCategory=v}],["fetchCategory",["fetchCategory"],function(v){fetchCategory=v}],["fetchCategoryById",["fetchCategoryById"],function(v){fetchCategoryById=v}],["updateCategory",["updateCategory"],function(v){updateCategory=v}]]);_bca‍.w("./controllers/middleware/ticketType.validate",[["validateTicketTypeData",["validateTicketTypeData"],function(v){validateTicketTypeData=v}],["validateTicketTypeUpdateData",["validateTicketTypeUpdateData"],function(v){validateTicketTypeUpdateData=v}]]);_bca‍.w("./controllers/ticketType.controller",[["createTicketType",["createTicketType"],function(v){createTicketType=v}],["deleteticketType",["deleteticketType"],function(v){deleteticketType=v}],["fetchticketType",["fetchticketType"],function(v){fetchticketType=v}],["fetchTicketTypeById",["fetchTicketTypeById"],function(v){fetchTicketTypeById=v}],["updateticketType",["updateticketType"],function(v){updateticketType=v}]]);

















dotenv.config()

// const db = mongoose.createConnection(process.env.DEV_DB);
// db.on('connected', () => {
//     console.log('connection successful');
// })

// db.on('error', (err) => {
//     console.log('connection failed', err.message);
// })

const connectToDB = () => mongoose.connect(process.env.DEV_DB);

connectToDB()
    .then(() => console.log('connected'))
    .catch((err) => _bca‍.g.console.log(err.message))

const server = express();
server.use(express.json());
server.use(
    express.urlencoded({
        extended: true,
    })
)
const port = 4001; 

// Add code  to make our server be able to read json form and url encoded form
server.use(express.json());
server.use(express.urlencoded({ extended:true}));

server.get('/', homeController);


// events route
server.get('/event', fetchEvents)
server.post('/event', validateEventData, createEvent);
server.get('/event/:id', fetchEventById);
server.put('/event/:id', updateEvent);
server.delete('/event/:id', deleteEvent);

// category route
server.get('/category', fetchCategory)
server.post('/category', validateCategoryData, createCategory);
server.get('/category/:id', fetchCategoryById);
server.put('/category/:id', updateCategory);
server.delete('/category/:id', deleteCategory);


// tickettype route
server.get('/tickettype', fetchticketType);
server.post('/tickettype', validateTicketTypeData, createTicketType);
server.get('/tickettype/:id', fetchTicketTypeById);
server.put('/tickettype/:id', validateTicketTypeUpdateData, updateticketType);
server.delete('/tickettype:id', deleteticketType);


// organizer route
server.get('/organizer', fetchOrganizer);
server.post('/organizer', validateOrganizerData, createOrganizer);
server.get('/organizer/:id', fetchOrganizerById);
server.put('/organizer/:id', validateOrganizerUpdateData, updateOrganizer);
server.delete('/organizer/:id', deleteOrganizer);




server.listen(port, () =>{
    _bca‍.g.console.log('server started and running on port' + port)
}); 